name: Build and Release MuseCraft Studio (Windows)

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0, v1.2.3, etc.
    branches:
      - main
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  pull_request:
    branches:
      - main
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
  PNPM_CACHE_FOLDER: ${{ github.workspace }}/.cache/pnpm

jobs:
  build:
    name: Build MuseCraft Studio (Windows)
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            build_script: build:win
            executable_ext: .exe
            artifact_pattern: 'dist/v*/MuseCraft-v*-win.exe'
            artifact_name: 'MuseCraft-Studio-Windows'
            
          - os: windows-latest
            name: Windows-Portable
            build_script: build:win-portable
            executable_ext: .exe
            artifact_pattern: 'dist/v*/MuseCraft-v*-win-portable.exe'
            artifact_name: 'MuseCraft-Studio-Windows-Portable'

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get version info
        id: version
        shell: bash
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat package.json | grep '"version"' | sed 's/.*"version": "\(.*\)".*/\1/')
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: ✅ Verify pnpm and Node.js are available
        run: |
          echo "node version:" && node --version
          echo "pnpm version:" && pnpm --version
          echo "npm version:" && npm --version

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🗂️ Setup Electron cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: 🗂️ Setup Electron Builder cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: 📦 Install dependencies with pnpm
        run: |
          echo "📦 Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Verify installation
        run: |
          echo "📋 Verifying installation..."
          pnpm list --depth=0
          node --version
          pnpm --version
          echo "✅ Installation verified"

      - name: 🧪 Run tests (if available)
        run: |
          if (Select-String -Path "package.json" -Pattern '"test"') {
            echo "🧪 Running tests..."
            pnpm test
          } else {
            echo "📝 No tests configured, skipping..."
          }
        shell: powershell
        continue-on-error: true

      - name: 🧹 Clean previous builds
        run: |
          echo "🧹 Cleaning previous builds..."
          pnpm run clean:dev
          if (Test-Path "dist") { Remove-Item "dist" -Recurse -Force }
          echo "✅ Cleanup completed"
        shell: powershell
        continue-on-error: true

      - name: 🏗️ Build application (prebuild)
        run: |
          echo "🏗️ Running complete prebuild process for ${{ matrix.name }}..."
          pnpm run prebuild
          echo "✅ Prebuild completed successfully"

      - name: 🔍 Verify prebuild output
        run: |
          echo "🔍 Verifying prebuild created necessary files..."
          if (Test-Path "node_modules\.dev\main\package.json") {
            echo "✅ package.json found in .dev directory"
            Get-Content "node_modules\.dev\main\package.json" | Select-Object -First 10
          } else {
            echo "❌ package.json not found in .dev directory!"
            echo "Directory contents:"
            if (Test-Path "node_modules\.dev") {
              Get-ChildItem "node_modules\.dev" -Recurse
            } else {
              echo "node_modules\.dev directory does not exist!"
            }
            exit 1
          }
        shell: powershell

      - name: 🔧 Update version in package.json
        run: |
          echo "🔧 Updating version to ${{ steps.version.outputs.version }}..."
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${{ steps.version.outputs.version }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "
          echo "✅ Version updated"

      - name: 🏗️ Build Windows executable
        run: |
          echo "🏗️ Building Windows executable for ${{ matrix.name }}..."
          if ("${{ matrix.name }}" -eq "Windows-Portable") {
            pnpm electron-builder --win portable --publish never
          } else {
            pnpm electron-builder --win nsis --publish never
          }
          echo "✅ Windows build completed"
        shell: powershell

      - name: 🔍 Verify build output
        run: |
          echo "🔍 Checking build output..."
          if (Test-Path "dist") {
            echo "📁 dist directory found"
            Get-ChildItem "dist" -Recurse
            
            $exeFiles = Get-ChildItem "dist" -Recurse -Filter "*.exe"
            if ($exeFiles.Count -gt 0) {
              echo "📦 Built executable files:"
              foreach ($file in $exeFiles) {
                $size = [math]::Round($file.Length / 1MB, 2)
                echo "  📄 $($file.FullName) ($size MB)"
              }
            } else {
              echo "❌ No executable files found!"
              echo "Directory contents:"
              Get-ChildItem "dist" -Recurse | Select-Object -First 20
              exit 1
            }
          } else {
            echo "❌ No dist directory found!"
            exit 1
          }
        shell: powershell

      - name: 🏷️ Prepare artifact name
        id: artifact
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARTIFACT_NAME="${{ matrix.artifact_name }}-v${VERSION}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "📦 Artifact name: $ARTIFACT_NAME"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: |
            dist/**/*.exe
            dist/**/*.zip
          retention-days: 30
          if-no-files-found: error

      - name: 📋 Generate build info
        shell: bash
        run: |
          echo "📋 Generating build information..."
          cat > build-info-${{ matrix.name }}.json << EOF
          {
            "name": "MuseCraft Studio",
            "version": "${{ steps.version.outputs.version }}",
            "platform": "${{ matrix.name }}",
            "os": "${{ matrix.os }}",
            "node_version": "$(node --version)",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "ref": "${{ github.ref }}",
            "actor": "${{ github.actor }}"
          }
          EOF
          echo "✅ Build info generated"

      - name: 📤 Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info-${{ matrix.name }}
          path: build-info-${{ matrix.name }}.json
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' ||
      startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      discussions: write

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get version info
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat package.json | grep '"version"' | sed 's/.*"version": "\(.*\)".*/\1/')
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release Version: $VERSION"

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: 🔍 List downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          find artifacts -type f | sort
          
          echo "📊 File sizes:"
          find artifacts -type f -name "*.exe" | while read file; do
            echo "  📄 $(basename "$file"): $(du -h "$file" | cut -f1)"
          done

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # 🎵 MuseCraft Studio v${{ steps.version.outputs.version }}
          
          **AI-Powered MIDI Generation Desktop Studio**
          
          ## ✨ What's New in v${{ steps.version.outputs.version }}
          
          - 🤖 **Advanced AI Model Management**: Load and manage multiple AI models with real-time status monitoring
          - 🎹 **Professional Piano Roll Editor**: Canvas-based MIDI editor with velocity control and synchronized timeline
          - ⚡ **Real-time WebSocket Communication**: Live generation progress updates and model status monitoring
          - 🎵 **Enhanced MIDI Import/Export**: Full compatibility with major DAWs and music software
          - 🎨 **Modern Dark Theme UI**: Beautiful interface built with React 19 and shadcn/ui components
          - 🔧 **Advanced AI Controls**: Fine-tune creativity, note density, musical style, and generation parameters
          
          ## 📥 Downloads (Windows Only)
          
          ### Windows
          - **MuseCraft-Studio-Windows**: Standard Windows installer with auto-updates
          - **MuseCraft-Studio-Windows-Portable**: Portable version that doesn't require installation
          
          > 📝 **Note**: This release currently includes Windows builds only. macOS and Linux builds will be added in future releases.
          
          ## 🚀 Getting Started
          
          ### Prerequisites
          1. **Download and setup MuseCraftEngine**: [GitHub Repository](https://github.com/WebChatAppAi/MuseCraftEngine)
          2. **Install PyTorch** for your system (CUDA/MPS/CPU)
          3. **Download AI models** from [HuggingFace](https://huggingface.co/projectlosangeles/MuseCraft/tree/main)
          
          ### Quick Setup
          1. Download the appropriate version for your operating system
          2. Install/extract the application
          3. Ensure MuseCraftEngine is running on localhost:8899
          4. Launch MuseCraft Studio and navigate to AI Setup
          5. Load your AI models and start creating music!
          
          ## 🔧 System Requirements
          
          ### Minimum
          - **Windows**: Windows 10 (64-bit) or later
          - **RAM**: 4GB (8GB recommended)
          - **Storage**: 500MB for application + space for AI models
          
          ### Recommended
          - **CPU**: 4+ cores (Intel i5/AMD Ryzen 5 or better)
          - **RAM**: 8GB+ (16GB for multiple large models)
          - **GPU**: NVIDIA GPU with CUDA for accelerated AI generation
          - **Storage**: SSD for faster model loading
          
          ## 🤖 AI Models
          
          Download pre-trained models from [HuggingFace Hub](https://huggingface.co/projectlosangeles/MuseCraft/tree/main):
          - **MuseCraft-v1.pth**: General purpose MIDI generation
          - **MuseCraft-Piano.pth**: Piano-focused compositions
          - **MuseCraft-Ensemble.pth**: Multi-instrument arrangements
          
          ## 📚 Documentation
          
          - 📖 **[Complete Usage Guide](https://github.com/WebChatAppAi/MuseCraft-Studio/blob/main/docs/usage-guide.md)**
          - 🔧 **[Technical Documentation](https://github.com/WebChatAppAi/MuseCraft-Studio/blob/main/docs/technical.md)**
          - 🚀 **[MuseCraftEngine Setup](https://github.com/WebChatAppAi/MuseCraftEngine)**
          - 🔍 **[Troubleshooting Guide](https://github.com/WebChatAppAi/MuseCraftEngine/blob/main/docs/troubleshooting.md)**
          
          ## 🐛 Known Issues
          
          - First launch may take longer as the application initializes
          - Some antivirus software may flag the executable (false positive)
          - GPU detection requires proper PyTorch installation in MuseCraftEngine
          
          ## 🆘 Support
          
          - 🐛 **Bug Reports**: [GitHub Issues](https://github.com/WebChatAppAi/MuseCraft-Studio/issues)
          - 💬 **Discussions**: [GitHub Discussions](https://github.com/WebChatAppAi/MuseCraft-Studio/discussions)
          - 📚 **Documentation**: [Usage Guide](https://github.com/WebChatAppAi/MuseCraft-Studio/blob/main/docs/usage-guide.md)
          
          ## 🙏 Acknowledgments
          
          Built with ❤️ for the AI music community using:
          - **Electron 37.3.1** for cross-platform desktop support
          - **React 19** for modern UI components  
          - **TypeScript 5.9.2** for type-safe development
          - **shadcn/ui** for beautiful UI components
          - **Tailwind CSS** for responsive styling
          - **Tone.js** for audio synthesis and MIDI playback
          
          ---
          
          **🎹 Start creating beautiful AI-powered music today! ✨**
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: 🏷️ Create Git tag (if not from tag push)
        if: ${{ false == startsWith(github.ref, 'refs/tags/v') }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "MuseCraft Studio ${{ steps.version.outputs.tag }} (Windows)"
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          files: |
            artifacts/**/*.exe
            artifacts/**/*.zip
            artifacts/**/*.json
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          discussion_category_name: "Releases"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        run: |
          echo "## 🎉 MuseCraft Studio Release Created! 🎵" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Created**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🖥️ Available Downloads (Windows Only)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Windows Installer**: Standard Windows installation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Windows Portable**: No installation required" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 **Note**: macOS and Linux builds will be added in future releases" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **[Download Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }})**" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **[Live Demo](https://webchatappai.github.io/MuseCraft-Studio/)**" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **[MuseCraftEngine](https://github.com/WebChatAppAi/MuseCraftEngine)**" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 **[AI Models](https://huggingface.co/projectlosangeles/MuseCraft/tree/main)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎹✨ **Happy Music Making!** ✨🎵" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup Artifacts
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🧹 Cleanup build artifacts (keep for 7 days)
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            MuseCraft-Studio-Windows-*
            build-info-*
          failOnError: false
          useGlob: true
        continue-on-error: true