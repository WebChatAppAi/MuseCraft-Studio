name: Build and Release MuseCraft Studio v1

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0, v1.2.3, etc.
    branches:
      - main
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  pull_request:
    branches:
      - main
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  build:
    name: Build MuseCraft Studio
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            build_script: build:win
            executable_ext: .exe
            artifact_pattern: 'dist/v*/MuseCraft-v*-win.exe'
            artifact_name: 'MuseCraft-Studio-Windows'
            
          - os: windows-latest
            name: Windows-Portable
            build_script: build:win-portable
            executable_ext: .exe
            artifact_pattern: 'dist/v*/MuseCraft-v*-win-portable.exe'
            artifact_name: 'MuseCraft-Studio-Windows-Portable'
            
          - os: macos-latest
            name: macOS
            build_script: build:mac
            executable_ext: .dmg
            artifact_pattern: 'dist/v*/MuseCraft-v*-mac.dmg'
            artifact_name: 'MuseCraft-Studio-macOS'
            
          - os: macos-latest
            name: macOS-ARM64
            build_script: build:mac-arm64
            executable_ext: .dmg
            artifact_pattern: 'dist/v*/MuseCraft-v*-mac-arm64.dmg'
            artifact_name: 'MuseCraft-Studio-macOS-ARM64'

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get version info
        id: version
        shell: bash
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat package.json | grep '"version"' | sed 's/.*"version": "\(.*\)".*/\1/')
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗂️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🗂️ Setup Electron cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: 🗂️ Setup Electron Builder cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Verify installation
        run: |
          echo "📋 Verifying installation..."
          pnpm list --depth=0
          node --version
          npm --version
          echo "✅ Installation verified"

      - name: 🧪 Run tests (if available)
        run: |
          if grep -q '"test"' package.json; then
            echo "🧪 Running tests..."
            pnpm test || echo "⚠️ Tests failed but continuing build"
          else
            echo "📝 No tests configured, skipping..."
          fi

      - name: 🧹 Clean previous builds
        run: |
          echo "🧹 Cleaning previous builds..."
          pnpm clean:dev || echo "⚠️ Clean command not available"
          rm -rf dist || true
          echo "✅ Cleanup completed"

      - name: 🏗️ Build application
        run: |
          echo "🏗️ Building MuseCraft Studio for ${{ matrix.name }}..."
          pnpm compile:app
          echo "✅ Application built successfully"

      - name: 🔧 Update version in package.json
        run: |
          echo "🔧 Updating version to ${{ steps.version.outputs.version }}..."
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${{ steps.version.outputs.version }}';
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "
          echo "✅ Version updated"

      - name: 🏗️ Build Windows executable
        if: matrix.os == 'windows-latest'
        run: |
          echo "🏗️ Building Windows executable..."
          if [ "${{ matrix.name }}" == "Windows-Portable" ]; then
            pnpm electron-builder --win portable --publish never
          else
            pnpm electron-builder --win nsis --publish never
          fi
          echo "✅ Windows build completed"
        shell: bash

      - name: 🏗️ Build macOS application
        if: matrix.os == 'macos-latest'
        run: |
          echo "🏗️ Building macOS application..."
          if [ "${{ matrix.name }}" == "macOS-ARM64" ]; then
            pnpm electron-builder --mac --arm64 --publish never
          else
            pnpm electron-builder --mac --x64 --publish never
          fi
          echo "✅ macOS build completed"

      - name: 🔍 Verify build output
        shell: bash
        run: |
          echo "🔍 Checking build output..."
          ls -la dist/ || echo "No dist directory found"
          find dist -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | head -10
          
          # Find the actual built files
          if [ -d "dist" ]; then
            BUILD_FILES=$(find dist -type f \( -name "*.exe" -o -name "*.dmg" \) | head -5)
            if [ -n "$BUILD_FILES" ]; then
              echo "📦 Built files:"
              echo "$BUILD_FILES" | while read file; do
                echo "  📄 $file ($(du -h "$file" | cut -f1))"
              done
            else
              echo "❌ No executable files found!"
              echo "Directory contents:"
              find dist -type f | head -20
              exit 1
            fi
          else
            echo "❌ No dist directory found!"
            exit 1
          fi

      - name: 🏷️ Prepare artifact name
        id: artifact
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARTIFACT_NAME="${{ matrix.artifact_name }}-v${VERSION}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "📦 Artifact name: $ARTIFACT_NAME"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: |
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.AppImage
            dist/**/*.deb
            dist/**/*.rpm
            dist/**/*.zip
          retention-days: 30
          if-no-files-found: error

      - name: 📋 Generate build info
        shell: bash
        run: |
          echo "📋 Generating build information..."
          cat > build-info-${{ matrix.name }}.json << EOF
          {
            "name": "MuseCraft Studio",
            "version": "${{ steps.version.outputs.version }}",
            "platform": "${{ matrix.name }}",
            "os": "${{ matrix.os }}",
            "node_version": "$(node --version)",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "ref": "${{ github.ref }}",
            "actor": "${{ github.actor }}"
          }
          EOF
          echo "✅ Build info generated"

      - name: 📤 Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: build-info-${{ matrix.name }}
          path: build-info-${{ matrix.name }}.json
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' ||
      startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      discussions: write

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get version info
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat package.json | grep '"version"' | sed 's/.*"version": "\(.*\)".*/\1/')
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release Version: $VERSION"

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: 🔍 List downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          find artifacts -type f | sort
          
          echo "📊 File sizes:"
          find artifacts -type f -name "*.exe" -o -name "*.dmg" | while read file; do
            echo "  📄 $(basename "$file"): $(du -h "$file" | cut -f1)"
          done

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # 🎵 MuseCraft Studio v${{ steps.version.outputs.version }}
          
          **AI-Powered MIDI Generation Desktop Studio**
          
          ## ✨ What's New in v${{ steps.version.outputs.version }}
          
          - 🤖 **Advanced AI Model Management**: Load and manage multiple AI models with real-time status monitoring
          - 🎹 **Professional Piano Roll Editor**: Canvas-based MIDI editor with velocity control and synchronized timeline
          - ⚡ **Real-time WebSocket Communication**: Live generation progress updates and model status monitoring
          - 🎵 **Enhanced MIDI Import/Export**: Full compatibility with major DAWs and music software
          - 🎨 **Modern Dark Theme UI**: Beautiful interface built with React 19 and shadcn/ui components
          - 🔧 **Advanced AI Controls**: Fine-tune creativity, note density, musical style, and generation parameters
          
          ## 📥 Downloads
          
          ### Windows
          - **MuseCraft-Studio-Windows**: Standard Windows installer with auto-updates
          - **MuseCraft-Studio-Windows-Portable**: Portable version that doesn't require installation
          
          ### macOS
          - **MuseCraft-Studio-macOS**: Universal macOS application (Intel Macs)
          - **MuseCraft-Studio-macOS-ARM64**: Optimized for Apple Silicon (M1/M2/M3 Macs)
          
          ## 🚀 Getting Started
          
          ### Prerequisites
          1. **Download and setup MuseCraftEngine**: [GitHub Repository](https://github.com/WebChatAppAi/MuseCraftEngine)
          2. **Install PyTorch** for your system (CUDA/MPS/CPU)
          3. **Download AI models** from [HuggingFace](https://huggingface.co/projectlosangeles/MuseCraft/tree/main)
          
          ### Quick Setup
          1. Download the appropriate version for your operating system
          2. Install/extract the application
          3. Ensure MuseCraftEngine is running on localhost:8899
          4. Launch MuseCraft Studio and navigate to AI Setup
          5. Load your AI models and start creating music!
          
          ## 🔧 System Requirements
          
          ### Minimum
          - **Windows**: Windows 10 (64-bit) or later
          - **macOS**: macOS 10.14 Mojave or later
          - **RAM**: 4GB (8GB recommended)
          - **Storage**: 500MB for application + space for AI models
          
          ### Recommended
          - **CPU**: 4+ cores (Intel i5/AMD Ryzen 5 or better)
          - **RAM**: 8GB+ (16GB for multiple large models)
          - **GPU**: NVIDIA GPU with CUDA or Apple Silicon for accelerated AI generation
          - **Storage**: SSD for faster model loading
          
          ## 🤖 AI Models
          
          Download pre-trained models from [HuggingFace Hub](https://huggingface.co/projectlosangeles/MuseCraft/tree/main):
          - **MuseCraft-v1.pth**: General purpose MIDI generation
          - **MuseCraft-Piano.pth**: Piano-focused compositions
          - **MuseCraft-Ensemble.pth**: Multi-instrument arrangements
          
          ## 📚 Documentation
          
          - 📖 **[Complete Usage Guide](https://github.com/WebChatAppAi/MuseCraft-Studio/blob/main/docs/usage-guide.md)**
          - 🔧 **[Technical Documentation](https://github.com/WebChatAppAi/MuseCraft-Studio/blob/main/docs/technical.md)**
          - 🚀 **[MuseCraftEngine Setup](https://github.com/WebChatAppAi/MuseCraftEngine)**
          - 🔍 **[Troubleshooting Guide](https://github.com/WebChatAppAi/MuseCraftEngine/blob/main/docs/troubleshooting.md)**
          
          ## 🐛 Known Issues
          
          - First launch may take longer as the application initializes
          - Some antivirus software may flag the executable (false positive)
          - GPU detection requires proper PyTorch installation in MuseCraftEngine
          
          ## 🆘 Support
          
          - 🐛 **Bug Reports**: [GitHub Issues](https://github.com/WebChatAppAi/MuseCraft-Studio/issues)
          - 💬 **Discussions**: [GitHub Discussions](https://github.com/WebChatAppAi/MuseCraft-Studio/discussions)
          - 📚 **Documentation**: [Usage Guide](https://github.com/WebChatAppAi/MuseCraft-Studio/blob/main/docs/usage-guide.md)
          
          ## 🙏 Acknowledgments
          
          Built with ❤️ for the AI music community using:
          - **Electron 37.3.1** for cross-platform desktop support
          - **React 19** for modern UI components  
          - **TypeScript 5.9.2** for type-safe development
          - **shadcn/ui** for beautiful UI components
          - **Tailwind CSS** for responsive styling
          - **Tone.js** for audio synthesis and MIDI playback
          
          ---
          
          **🎹 Start creating beautiful AI-powered music today! ✨**
          EOF
          
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: 🏷️ Create Git tag (if not from tag push)
        if: ${{ false == startsWith(github.ref, 'refs/tags/v') }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "MuseCraft Studio ${{ steps.version.outputs.tag }}"
          body_path: ${{ steps.release_notes.outputs.release_notes_file }}
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.json
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          discussion_category_name: "Releases"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        run: |
          echo "## 🎉 MuseCraft Studio Release Created! 🎵" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Created**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🖥️ Available Downloads" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Windows Installer**: Standard Windows installation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Windows Portable**: No installation required" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **macOS Intel**: For Intel-based Macs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **macOS ARM64**: Optimized for Apple Silicon (M1/M2/M3)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **[Download Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }})**" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **[Live Demo](https://webchatappai.github.io/MuseCraft-Studio/)**" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **[MuseCraftEngine](https://github.com/WebChatAppAi/MuseCraftEngine)**" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 **[AI Models](https://huggingface.co/projectlosangeles/MuseCraft/tree/main)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎹✨ **Happy Music Making!** ✨🎵" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup Artifacts
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🧹 Cleanup build artifacts (keep for 7 days)
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            MuseCraft-Studio-Windows-*
            MuseCraft-Studio-macOS-*
            build-info-*
          failOnError: false
          useGlob: true
        continue-on-error: true