name: Deploy MuseCraft Studio GitHub Pages v1

on:
  push:
    branches: [ "main", "master" ]
    paths:
      - 'docs/**'
      - 'preview/**'
      - 'src/resources/**'
      - '.github/workflows/deploy-pages.yml'
  pull_request:
    branches: [ "main", "master" ]
    paths:
      - 'docs/**'
      - 'preview/**'
      - 'src/resources/**'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're not building anything
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper git operations
      
      - name: 🔍 Validate required files exist
        run: |
          echo "🔍 Checking for required files..."
          
          # Check if main HTML file exists
          if [ ! -f "docs/index.html" ]; then
            echo "❌ Error: docs/index.html not found!"
            exit 1
          fi
          echo "✅ docs/index.html found"
          
          # Check if preview images exist
          preview_images=("landing-page.png" "dashboard.png" "aisetup.png" "musicalconfig.png" "velocity&notes.png")
          for img in "${preview_images[@]}"; do
            if [ ! -f "preview/$img" ]; then
              echo "❌ Error: preview/$img not found!"
              exit 1
            fi
            echo "✅ preview/$img found"
          done
          
          # Check if icon exists
          if [ ! -f "src/resources/icon.png" ]; then
            echo "❌ Error: src/resources/icon.png not found!"
            exit 1
          fi
          echo "✅ src/resources/icon.png found"
          
          echo "🎉 All required files validated successfully!"
      
      - name: 🏗️ Optimize images for web
        run: |
          echo "🖼️ Optimizing images for web deployment..."
          
          # Install imagemagick for image optimization (if needed)
          sudo apt-get update && sudo apt-get install -y imagemagick
          
          # Create optimized versions of large images (optional, preserve originals)
          mkdir -p docs/optimized-preview
          
          # Optimize preview images for faster loading
          for img in preview/*.png; do
            if [ -f "$img" ]; then
              filename=$(basename "$img")
              echo "Optimizing $filename..."
              # Convert and compress PNG images (preserve quality but reduce file size)
              convert "$img" -strip -interlace Plane -quality 85 "docs/optimized-preview/$filename" || cp "$img" "docs/optimized-preview/$filename"
            fi
          done
          
          echo "✅ Image optimization completed"
      
      - name: 📄 Create robots.txt and sitemap
        run: |
          echo "🤖 Creating robots.txt..."
          cat > docs/robots.txt << EOF
          User-agent: *
          Allow: /
          
          Sitemap: https://webchatappai.github.io/MuseCraft-Studio/sitemap.xml
          EOF
          
          echo "🗺️ Creating sitemap.xml..."
          cat > docs/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://webchatappai.github.io/MuseCraft-Studio/</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          
          echo "✅ SEO files created"
      
      - name: 📊 Generate deployment info
        run: |
          echo "📊 Generating deployment information..."
          
          # Create deployment info file
          cat > docs/deployment-info.json << EOF
          {
            "version": "v1",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "commit_ref": "${{ github.ref }}",
            "repository": "${{ github.repository }}",
            "actor": "${{ github.actor }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "run_number": "${{ github.run_number }}",
            "pages_url": "https://webchatappai.github.io/MuseCraft-Studio/"
          }
          EOF
          
          echo "✅ Deployment info generated"
      
      - name: 🧪 Validate HTML structure
        run: |
          echo "🧪 Validating HTML structure..."
          
          # Check if HTML file is valid
          if ! command -v tidy &> /dev/null; then
            sudo apt-get install -y tidy
          fi
          
          # Validate HTML (allow warnings, fail only on errors)
          tidy -q -e docs/index.html || echo "⚠️ HTML validation completed with warnings (this is normal)"
          
          echo "✅ HTML validation completed"
      
      - name: 📝 Generate file manifest
        run: |
          echo "📝 Generating file manifest..."
          
          # Create a manifest of all files being deployed
          find docs -type f -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.png" -o -name "*.jpg" -o -name "*.svg" -o -name "*.ico" -o -name "*.xml" -o -name "*.txt" -o -name "*.json" | sort > docs/file-manifest.txt
          
          echo "📋 Files to be deployed:"
          cat docs/file-manifest.txt
          
          # Calculate total size
          total_size=$(find docs -type f -exec stat -f%z {} + 2>/dev/null | awk '{sum+=$1} END {print sum}' || find docs -type f -exec stat -c%s {} + | awk '{sum+=$1} END {print sum}')
          echo "📦 Total deployment size: $(echo $total_size | numfmt --to=iec-i)B"
          
          echo "✅ File manifest generated"
      
      - name: 🔧 Setup GitHub Pages
        uses: actions/configure-pages@v4
        
      - name: 📤 Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the docs directory
          path: './docs'
          retention-days: 30
      
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: 🎉 Deployment Summary
        run: |
          echo "## 🎉 MuseCraft Studio GitHub Pages Deployment Successful! 🎵" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v1" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Time:** $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🖼️ Deployed Content" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dark modern UI with animations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Complete image gallery showcase" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Technical specifications section" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Interactive features and modal gallery" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SEO optimized with sitemap and robots.txt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Features Included" >> $GITHUB_STEP_SUMMARY
          echo "- 🌙 **Dark Theme**: Professional interface optimized for developers" >> $GITHUB_STEP_SUMMARY
          echo "- 🖼️ **Image Gallery**: All app screenshots with modal viewer" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **Responsive Design**: Works perfectly on all device sizes" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Performance**: Optimized images and smooth animations" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **SEO Ready**: Meta tags, Open Graph, and Twitter Cards" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Live Site**: [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 **GitHub Repo**: [MuseCraft-Studio](https://github.com/WebChatAppAi/MuseCraft-Studio)" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **Backend Engine**: [MuseCraftEngine](https://github.com/WebChatAppAi/MuseCraftEngine)" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 **AI Models**: [HuggingFace Hub](https://huggingface.co/projectlosangeles/MuseCraft/tree/main)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🎵 **Made with ❤️ for the AI music community** 🎹✨" >> $GITHUB_STEP_SUMMARY
          
          # Also output to console
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Site is now live at: ${{ steps.deployment.outputs.page_url }}"
          echo "📊 This deployment includes all images and modern dark UI"
      
      - name: 🔔 Notify on failure
        if: failure()
        run: |
          echo "## ❌ MuseCraft Studio Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The GitHub Pages deployment encountered an error. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Common Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Missing required files (HTML, images, icons)" >> $GITHUB_STEP_SUMMARY
          echo "- Invalid HTML structure" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Pages permission issues" >> $GITHUB_STEP_SUMMARY
          echo "- Large file sizes exceeding GitHub limits" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the error logs above" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix any identified issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Push changes to trigger a new deployment" >> $GITHUB_STEP_SUMMARY
          echo "4. Check repository settings for GitHub Pages configuration" >> $GITHUB_STEP_SUMMARY
          
          exit 1